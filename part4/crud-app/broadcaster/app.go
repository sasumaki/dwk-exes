package main

import (
	"fmt"
	"net/http"
	"os"
	"strings"
	"sync"

	nats "github.com/nats-io/nats.go"

	_ "github.com/lib/pq"
)

func postToTG(data *nats.Msg) {
	fmt.Println("received dataust")
	message := string(data.Data)
	fmt.Println(message)
	// curl -d chat_id=327974261 -d text="msgeeee" https://api.telegram.org/bot1166412192:AAHrlvse4MRX7ULmOZKeeLM7ntv4ItRE7KY/sendMessage

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// Original command: curl -d chat_id=327974261 -d text="msgeeee" https://api.telegram.org/bot1166412192:AAHrlvse4MRX7ULmOZKeeLM7ntv4ItRE7KY/sendMessage

	body := strings.NewReader(`chat_id=33453454261&text=` + message)
	req, err := http.NewRequest("POST", "https://api.telegram.org/bot345325454192:AAHrsfgsgfglvse4MRX7ULmORE7KY/sendMessage", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
}

func main() {
	fmt.Println("Broadcaster alive")
	nc, err := nats.Connect(os.Getenv("NATS_URL"))
	if err != nil {
		panic(err)
	}
	defer nc.Close()
	wg := sync.WaitGroup{}
	wg.Add(1)

	nc.QueueSubscribe("todos", "q", postToTG)
	wg.Wait()
}
